import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

// C·∫•u h√¨nh
const INPUT_DIR = 'src/assets';
const OUTPUT_DIR = 'src/assets/optimized';
const QUALITY = 85; // Ch·∫•t l∆∞·ª£ng WebP (0-100)
const MAX_WIDTH = 1920; // Chi·ªÅu r·ªông t·ªëi ƒëa

// T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// H√†m ki·ªÉm tra xem file c√≥ ph·∫£i l√† ·∫£nh kh√¥ng
function isImageFile(filename) {
  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff'];
  const ext = path.extname(filename).toLowerCase();
  return imageExtensions.includes(ext);
}

// H√†m t·ªëi ∆∞u ·∫£nh b·∫±ng sharp
async function optimizeImage(inputPath, outputPath) {
  try {
    const sharp = await import('sharp');
    
    await sharp.default(inputPath)
      .resize(MAX_WIDTH, null, { 
        withoutEnlargement: true,
        fit: 'inside'
      })
      .webp({ 
        quality: QUALITY,
        effort: 6 // M·ª©c ƒë·ªô n√©n (0-6)
      })
      .toFile(outputPath);
    
    console.log(`‚úÖ T·ªëi ∆∞u: ${path.basename(inputPath)}`);
  } catch (error) {
    console.error(`‚ùå L·ªói t·ªëi ∆∞u ${inputPath}:`, error.message);
  }
}

// H√†m t·ªëi ∆∞u ·∫£nh b·∫±ng ImageMagick (fallback)
function optimizeImageWithImageMagick(inputPath, outputPath) {
  try {
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    execSync(`magick "${inputPath}" -resize ${MAX_WIDTH}x -quality ${QUALITY} "${outputPath}"`, {
      stdio: 'inherit'
    });
    
    console.log(`‚úÖ T·ªëi ∆∞u: ${path.basename(inputPath)}`);
  } catch (error) {
    console.error(`‚ùå L·ªói t·ªëi ∆∞u ${inputPath}:`, error.message);
  }
}

// H√†m ch√≠nh
async function optimizeImages() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu t·ªëi ∆∞u ·∫£nh...\n');
  
  // ƒê·ªçc t·∫•t c·∫£ file trong th∆∞ m·ª•c assets
  const files = fs.readdirSync(INPUT_DIR);
  const imageFiles = files.filter(isImageFile);
  
  if (imageFiles.length === 0) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c assets');
    return;
  }
  
  console.log(`üìÅ T√¨m th·∫•y ${imageFiles.length} ·∫£nh c·∫ßn t·ªëi ∆∞u:\n`);
  
  // Ki·ªÉm tra xem c√≥ sharp kh√¥ng
  let useSharp = false;
  try {
    await import('sharp');
    useSharp = true;
    console.log('üì¶ S·ª≠ d·ª•ng Sharp ƒë·ªÉ t·ªëi ∆∞u ·∫£nh...\n');
  } catch (error) {
    console.log('üì¶ Sharp kh√¥ng c√≥ s·∫µn, th·ª≠ s·ª≠ d·ª•ng ImageMagick...\n');
  }
  
  // Force s·ª≠ d·ª•ng Sharp n·∫øu ƒë√£ c√†i ƒë·∫∑t
  if (!useSharp) {
    console.log('üîß Th·ª≠ c√†i ƒë·∫∑t Sharp...');
    try {
      execSync('npm install sharp', { stdio: 'inherit' });
      useSharp = true;
      console.log('‚úÖ Sharp ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† s·∫µn s√†ng s·ª≠ d·ª•ng!\n');
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Sharp, s·ª≠ d·ª•ng ImageMagick...\n');
    }
  }
  
  // T·ªëi ∆∞u t·ª´ng ·∫£nh
  for (const filename of imageFiles) {
    const inputPath = path.join(INPUT_DIR, filename);
    const nameWithoutExt = path.parse(filename).name;
    const outputPath = path.join(OUTPUT_DIR, `${nameWithoutExt}.webp`);
    
    if (useSharp) {
      await optimizeImage(inputPath, outputPath);
    } else {
      optimizeImageWithImageMagick(inputPath, outputPath);
    }
  }
  
  console.log('\nüéâ Ho√†n th√†nh t·ªëi ∆∞u ·∫£nh!');
  console.log(`üìÇ ·∫¢nh ƒë√£ t·ªëi ∆∞u ƒë∆∞·ª£c l∆∞u trong: ${OUTPUT_DIR}`);
}

// Ch·∫°y script
optimizeImages().catch(console.error); 